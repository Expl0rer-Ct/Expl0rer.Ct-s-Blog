<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CTF_writeup on Expl0rer.Ct</title>
        <link>https://expl0rer.top/categories/ctf_writeup/</link>
        <description>Recent content in CTF_writeup on Expl0rer.Ct</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Expl0rer.Ct</copyright><atom:link href="https://expl0rer.top/categories/ctf_writeup/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PWN-3</title>
        <link>https://expl0rer.top/p/pwn-3/</link>
        <pubDate>Tue, 26 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://expl0rer.top/p/pwn-3/</guid>
        <description>&lt;img src="https://expl0rer.top/p/pwn-3/PWN3.png" alt="Featured image of post PWN-3" /&gt;&lt;p&gt;&lt;strong&gt;前文：以下是我入门PWN的记录，欢迎各位前来观看，小弟领教！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PWN-2</title>
        <link>https://expl0rer.top/p/pwn-2/</link>
        <pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://expl0rer.top/p/pwn-2/</guid>
        <description>&lt;img src="https://expl0rer.top/p/pwn-2/PWN2.png" alt="Featured image of post PWN-2" /&gt;&lt;p&gt;&lt;strong&gt;前文：以下是我入门PWN的记录，欢迎各位前来观看，小弟领教！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;继上一大章的基础学习后，对PWN有了一定了解，知道一些专名词、一些保护机制的工作流程、汇编语言等，接下来的几章开始正式学习二进制的漏洞利用和原理。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;栈是PWN比较常见的突破点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;栈溢出原理&#34;&gt;栈溢出原理
&lt;/h2&gt;&lt;p&gt;在上一大章的函数调用约定中，我们可以了解到函数的调用过程：
调用函数：只需要将rip压栈，即push rip，然后讲rip赋值为被调用函数的起始地址，这一操作被隐性的内置在call指令中。&lt;/p&gt;
&lt;p&gt;被调用函数：push rbp； mov rbp rsp；sub rsp oxxx。即保存调用函数的rbp指针，将自己的rbp指针指向栈顶，然后开辟栈空间给自己用,此时rbp就变成了被调用函数的栈底。&lt;/p&gt;
&lt;p&gt;函数返回：leave；ret；翻译过来就是：mov rsp rbp；pop rbp；pop rip；即恢复栈帧，返回调用函数的返回地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈的作用为存储函数调用相关信息以及函数的局部变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些局部变量通常为数组或者输入的缓冲区（buf）。而函数调用相关的信息，主要是返回地址和栈底指针（rbp）。&lt;/p&gt;
&lt;h3 id=&#34;栈溢出&#34;&gt;栈溢出
&lt;/h3&gt;&lt;p&gt;函数中的存储在找中的局部变量数组边界检查不严格发生越界写，造成用户输入覆盖到缓冲区外的数据内容。&lt;/p&gt;
&lt;p&gt;由于栈中同时存在着与函数调用参数的相关信息，栈溢出可以导致&lt;strong&gt;控制流劫持&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;来让我解释一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若用户输入长度超过数组容量，超出的部分会&lt;strong&gt;向上覆盖栈中更高地址的数据&lt;/strong&gt;（因为栈向下生长，越界写会向高地址蔓延）；&lt;/li&gt;
&lt;li&gt;当覆盖到 “返回地址” 时，攻击者可以将其修改为&lt;strong&gt;任意地址&lt;/strong&gt;（如 shellcode 地址、ROP gadget 地址等）；&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt; // 包含read函数声明&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 存在漏洞的函数：读取200字节到80字节的缓冲区
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 局部变量：80字节的数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 从标准输入读取200字节到buf（无长度检查，必然溢出）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 调用func_a的函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;func_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// 调用漏洞函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// 局部变量c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// 给c赋值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 主函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;func_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// 调用func_b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// 局部变量a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// 给a赋值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;main函数调用b，b函数调用a。缓冲区溢出发生在a函数中。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;buf的长度为80，但是却读入了200长度。&lt;/em&gt;（栈溢出）&lt;/p&gt;
&lt;p&gt;分析程序运行至a时的栈帧、栈中存放buf和返回地址等等信息：
&lt;img src=&#34;https://expl0rer.top/p/pwn-2/1.png&#34;
	width=&#34;413&#34;
	height=&#34;840&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-2/1_hu_2535d359c272f0be.png 480w, https://expl0rer.top/p/pwn-2/1_hu_de5df19999eb436.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;buf的长度为80，紧邻b函数的rbp指针和返回地址&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;49&#34;
		data-flex-basis=&#34;118px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;输入200长度造成栈溢出，超出的 120 字节会向上覆盖栈中更高地址的内容如ret（因为栈向下生长，越界写会向高地址蔓延）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖返回地址可以控制程序下一步执行的位置，而通过控制执行位置，攻击者可以间接实现 “修改任意地址” 的效果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;举例，攻击者构造输入：前 84 字节填充无关数据（覆盖buf和func_b()的 ebp），第 85~88 字节填入0x12345678（小端序可能需要反写为0x78563412）；这时返回地址被覆盖成0x12345678，直接跳转到0x12345678（可能是攻击者的代码）。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PWN-1</title>
        <link>https://expl0rer.top/p/pwn-1/</link>
        <pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://expl0rer.top/p/pwn-1/</guid>
        <description>&lt;img src="https://expl0rer.top/p/pwn-1/PWN.png" alt="Featured image of post PWN-1" /&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前文：以下是我入门PWN的记录，欢迎各位前来观看，小弟领教！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;ctf是什么&#34;&gt;CTF是什么？
&lt;/h1&gt;&lt;p&gt;CTF（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式。&lt;/p&gt;
&lt;p&gt;CTF比赛形式主要为&lt;strong&gt;线上解题（jeopardy）&lt;strong&gt;和&lt;/strong&gt;线下攻防（Attack With Defence）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线上赛题目大致方向有WEB、RE、PWN、MISC、CRYPTO，解出flag交给服务器验证通过才得分。&lt;/p&gt;
&lt;h2 id=&#34;pwn简介&#34;&gt;PWN简介
&lt;/h2&gt;&lt;p&gt;Pwn是什么？&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Pwn&amp;quot;是一个黑客语法的俚语词，是指攻破设备或者系统。发音类似“砰”，对黑客而言，这就是成功实施黑客攻击的声音一研的一声，被“黑”的电脑或手机就被你操纵了。CTF中的PWN主要是针对于二进制漏洞挖掘与利用，通常情况下选手需要对于一个有漏洞的可执行文件进行分析，找到漏洞，然后利用漏洞读取远程服务器上的FLAG。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/hacker.png&#34;
	width=&#34;1665&#34;
	height=&#34;715&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/hacker_hu_702f4e64d6a77d56.png 480w, https://expl0rer.top/p/pwn-1/hacker_hu_91330cec3c1ac9fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;558px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pwn传统出题方向：glibc PWN：堆、栈、shellcode编写、iofile等。进阶：arm架构、loT、内核、vm、浏览器等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所需工具：pwntools、pwndbg、IDA、虚拟机（Ubuntu或Kali）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际生活中我们会遇到的pwn：&lt;/p&gt;
&lt;p&gt;泄露通信数据：心脏滴血（cve-2014-0160）&lt;/p&gt;
&lt;p&gt;Linux本地提权root：脏牛dirty cow（cve-2016-5195）&lt;/p&gt;
&lt;p&gt;Wannacry：永恒之蓝勒索病毒&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/glibc-pwn.png&#34;
	width=&#34;2010&#34;
	height=&#34;731&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/glibc-pwn_hu_76ead02599234b1.png 480w, https://expl0rer.top/p/pwn-1/glibc-pwn_hu_4c76d810cb42dfe6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;glibc学习路线&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;659px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-error&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;PWN入门劝退集&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;第一节汇编语言基础&#34;&gt;第一节：汇编语言基础
&lt;/h2&gt;&lt;p&gt;我自己在打ctf逆向和pwn，也时常搞不懂bit和byte，在这里我先把一些计算机内的量词回忆一下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;名称&lt;/th&gt;
          &lt;th&gt;翻译&lt;/th&gt;
          &lt;th&gt;大小&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;bit&lt;/td&gt;
          &lt;td&gt;比特&lt;/td&gt;
          &lt;td&gt;1位（1b）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;byte&lt;/td&gt;
          &lt;td&gt;字节&lt;/td&gt;
          &lt;td&gt;8位（1B）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;word&lt;/td&gt;
          &lt;td&gt;字&lt;/td&gt;
          &lt;td&gt;16位&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dword&lt;/td&gt;
          &lt;td&gt;双字&lt;/td&gt;
          &lt;td&gt;32位&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;qword&lt;/td&gt;
          &lt;td&gt;四字&lt;/td&gt;
          &lt;td&gt;64位&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;计算机寻址方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在当前主流的操作系统中，都是以字节（B）为寻址单位进行寻址。&lt;/p&gt;
&lt;p&gt;意味着计算机访问的最小单位是一个字节（B）。&lt;/p&gt;
&lt;p&gt;类比于人口普查，普查员以每户（B)为单位统计，而不是访问到个人（b）。&lt;/p&gt;
&lt;h3 id=&#34;寄存器&#34;&gt;寄存器
&lt;/h3&gt;&lt;p&gt;计算机的指令都是由CPU来执行。&lt;/p&gt;
&lt;p&gt;在计算机系统结构中，CPU和内存是分开的。&lt;/p&gt;
&lt;p&gt;寄存器存在于CPU中，是CPU的直接操作对象。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;寄存器名称&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
          &lt;th&gt;备注&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;RAX&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EAX；低16位：AX；低8位：AL&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RBX&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EAX；低16位：AX；低8位：AL&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RCX&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EAX；低16位：AX；低8位：AL&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RDX&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EAX；低16位：AX；低8位：AL&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RDI&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RSI&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R8&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R9&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R10&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R11&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R12&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R13&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R14&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R15&lt;/td&gt;
          &lt;td&gt;通用寄存器&lt;/td&gt;
          &lt;td&gt;低32位：EDI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RSP&lt;/td&gt;
          &lt;td&gt;栈顶指针&lt;/td&gt;
          &lt;td&gt;低32位：ESP&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RBP&lt;/td&gt;
          &lt;td&gt;栈底指针&lt;/td&gt;
          &lt;td&gt;低32位：ESP&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;EFLAGS&lt;/td&gt;
          &lt;td&gt;标志寄存器&lt;/td&gt;
          &lt;td&gt;记录标志状态，包括AF、PF、SF、ZF、OF、CF等标识位&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RIP&lt;/td&gt;
          &lt;td&gt;指令计数器&lt;/td&gt;
          &lt;td&gt;保存下一条将会执行的指令的地址&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上述的通用寄存器，通常用于参数传递以及算数运算等通用场合。&lt;/p&gt;
&lt;p&gt;RSP为栈顶指针，RBP为栈底指针，二者用于维护程序运行时的函数栈，在之后的调用约定一节会对其进行讲解。&lt;/p&gt;
&lt;p&gt;EFLAGS为标志位寄存器，用于存储CPU运行计算过程中的状态，如进位溢出等。&lt;/p&gt;
&lt;p&gt;RIP指针用于存储CPU下一条将会执行的指针，不能直接修改,正常情况下会每一次运行一条指令自增一条指令的长度，当发生跳转时才会以其他形式改变其值。&lt;/p&gt;
&lt;h3 id=&#34;cpu的寻址方式&#34;&gt;CPU的寻址方式
&lt;/h3&gt;&lt;p&gt;学过C语言都知道指针，它是一个变量，它存储的是另一个变量的内存地址，而不是直接存储数据本身。这里解释的是比较含糊，详细的还请搜索引擎。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;寻址方式&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
          &lt;th&gt;实际访问&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;立即寻址&lt;/td&gt;
          &lt;td&gt;1234h&lt;/td&gt;
          &lt;td&gt;1234h这个数字本身&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;直接寻址&lt;/td&gt;
          &lt;td&gt;[1234h]&lt;/td&gt;
          &lt;td&gt;内存地址1234h&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;寄存器寻址&lt;/td&gt;
          &lt;td&gt;RAX&lt;/td&gt;
          &lt;td&gt;访问RAX寄存器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;寄存器间接寻址&lt;/td&gt;
          &lt;td&gt;[RAX]&lt;/td&gt;
          &lt;td&gt;访问RAX寄存器存储的值的这一内存地址&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;变址寻址&lt;/td&gt;
          &lt;td&gt;[RAX+1234h]&lt;/td&gt;
          &lt;td&gt;访问RAX寄存器存储的值+1234h这一内存地址&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;汇编指令&#34;&gt;汇编指令
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;指令类型&lt;/th&gt;
          &lt;th&gt;操作码&lt;/th&gt;
          &lt;th&gt;例子（Intel格式）&lt;/th&gt;
          &lt;th&gt;实际效果&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;数据传送指令&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;mov&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;mov rax rbx&lt;/td&gt;
          &lt;td&gt;rax = rbx&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;取地址指令&lt;/td&gt;
          &lt;td&gt;lea&lt;/td&gt;
          &lt;td&gt;lex rax [rbx]&lt;/td&gt;
          &lt;td&gt;rax =&amp;amp;*rbx&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;算数运算指令+&lt;/td&gt;
          &lt;td&gt;add&lt;/td&gt;
          &lt;td&gt;add rax rbx&lt;/td&gt;
          &lt;td&gt;rax = rax + rbx&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;sub&lt;/td&gt;
          &lt;td&gt;sub rax rbx&lt;/td&gt;
          &lt;td&gt;rax = rax - rbx&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;逻辑运算指令&lt;/td&gt;
          &lt;td&gt;and&lt;/td&gt;
          &lt;td&gt;and rax rbx&lt;/td&gt;
          &lt;td&gt;rax = rax&amp;amp;rbx&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;xor&lt;/td&gt;
          &lt;td&gt;xor rax rbx&lt;/td&gt;
          &lt;td&gt;rax = rax | rbx&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;函数调用指令&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;call 1234h&lt;/td&gt;
          &lt;td&gt;执行内存地址1234h处的函数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;函数返回指令&lt;/td&gt;
          &lt;td&gt;ret&lt;/td&gt;
          &lt;td&gt;ret&lt;/td&gt;
          &lt;td&gt;函数返回&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;比较&lt;/td&gt;
          &lt;td&gt;cmp&lt;/td&gt;
          &lt;td&gt;cmp rax rbx&lt;/td&gt;
          &lt;td&gt;比较rax与rbx，结果保存在EFLAG寄存器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;无条件跳转&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;jmp&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;jmp 1234h&lt;/td&gt;
          &lt;td&gt;eip = 1234h&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;栈操作指令&lt;/td&gt;
          &lt;td&gt;push&lt;/td&gt;
          &lt;td&gt;push rax&lt;/td&gt;
          &lt;td&gt;将rax存储的值压栈&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;pop rax&lt;/td&gt;
          &lt;td&gt;将栈顶的值赋值给rax，rsp+=8&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不难发现两个操作数指令的目的寄存器都是第一个寄存器，刚开始看的话有些奇怪。&lt;/p&gt;
&lt;p&gt;细心的同学可能会注意到call和jmp指令看起来效果都一样，但是描述却有些不同，call的话是函数调用，需要一些函数地址的保存压栈参数传递的操作，而jmp指令类似于C、Python语言的函数中的if、else语句，只涉及跳转，不能作为函数调用来使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;另外在pop时rsp为何是+8而不是-8。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;p&gt;上述问题留到之后的&lt;strong&gt;调用约定&lt;/strong&gt;中讲解&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;了解到上述汇编语言后，感觉生词特别多，这对我感觉也是，不过我建议还是学过C语言和有一点入门Python之后再去看汇编语言，不然会很坐牢的，因为：&lt;/p&gt;
&lt;p&gt;计算机在执行汇编代码时，只会顺序执行。&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;call&lt;/strong&gt;、&lt;strong&gt;jmp&lt;/strong&gt;、&lt;strong&gt;ret&lt;/strong&gt;这种指令来完成跳转，所以汇编指令代码的执行流并不像高级语言程序一样流程明确。（在学习了C语言的指针这块的知识点，这会让你学汇编比较有利的）&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-warn&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;汇编指令代码会经常跳转导致可读性差一些，但执行效果是和高级语言（C、Python语言）差不多的。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;给点表格太懵了，我列出些例子(assembly&amp;ndash;C)来看看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;int a = 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;label1&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;标签1，标签标志作用，用于标记代码中的某个位置，方便程序跳转或引用，标签本身不执行任何操作，仅作为一个 “标记点”，配合跳转指令jmp、jne（例如C中的goto作用），实现程序流程的控制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;a++、a = a + 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;loop&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;循环体的跳转&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;比较rax和100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;jge&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;label2&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;if a&amp;gt;= 100, break；这里就是a大于或等于100，就跳转到label2标签下的函数，否则就是小于100（jmp）跳转到label1下。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;label1&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;label2&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;标签2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;将寄存器rax的值设置为0,清零返回（return 0）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;不难发现，汇编语言的类似条件语句的jmp、jge不像if、else那样会有个比较符号（&amp;gt;=、&amp;lt;、!=、==）这样明显区分的，而是jge默认有条件跳转——大于等于&amp;gt;=则跳转，jmp则是强制跳转（而不是小于&amp;lt;就跳转），这点需要记住咯。&lt;/p&gt;
&lt;p&gt;这里的jge是通过eflag寄存器中的标志位来判断的，而eflag的标志位是通过之前的cmp来设置的。&lt;/p&gt;
&lt;p&gt;loop的情况稍些复杂，这里单独为其解释下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rcx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; 设置循环次数为 5（rcx 作为计数器）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;label_loop:&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; 循环体开始标签&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;; 循环执行的操作（例如打印、计算等）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;label_loop&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 计数器 rcx 减 1，若不为 0 则跳回 label_loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 循环结束后执行这里的代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rbx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;return 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;loop自带a- -、a =a -1的作用，所以rcx=5的话，那就循环执行5次，rcx=0就退出循环。&lt;/p&gt;
&lt;p&gt;好难啊，要长脑子了&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;还是用C语言开开路吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 循环计数器初始值为5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;//定义rax、rbx、rcx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rbx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// for循环模拟loop指令：先判断计数器，不为0则执行循环体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;rax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 对应 mov rax, 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;rax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 对应 add rax, 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;rbx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 循环结束后设置rbx为0；rbx其实在C语言中是没有用的，在汇编语言中就充当类似return 0的作用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;数值上下限溢出&#34;&gt;数值上下限/溢出
&lt;/h3&gt;&lt;p&gt;计算机不能存储无限大的数，这个数的数值有一定上限和下限。在这里了解下就好，学C语言都知道的。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;
          &lt;th&gt;存储空间大小&lt;/th&gt;
          &lt;th&gt;最小值（一一对应）&lt;/th&gt;
          &lt;th&gt;最大值（一一对应）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;char&lt;/td&gt;
          &lt;td&gt;1个字节&lt;/td&gt;
          &lt;td&gt;-128 或 0&lt;/td&gt;
          &lt;td&gt;127 或 255&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;unsigned char&lt;/td&gt;
          &lt;td&gt;1个字节&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;255&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;signed char&lt;/td&gt;
          &lt;td&gt;1个字节&lt;/td&gt;
          &lt;td&gt;-128&lt;/td&gt;
          &lt;td&gt;127&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;int&lt;/td&gt;
          &lt;td&gt;2个或4个字节&lt;/td&gt;
          &lt;td&gt;-32 768 或 -2 147 483 648&lt;/td&gt;
          &lt;td&gt;32767 或 2 147 483 647&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;unsigned int&lt;/td&gt;
          &lt;td&gt;2个或4个字节&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;65535或4 294 967 295&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;short&lt;/td&gt;
          &lt;td&gt;2个字节&lt;/td&gt;
          &lt;td&gt;-32 768&lt;/td&gt;
          &lt;td&gt;32767&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;unsigned short&lt;/td&gt;
          &lt;td&gt;2个字节&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;65 535&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;long&lt;/td&gt;
          &lt;td&gt;4个字节&lt;/td&gt;
          &lt;td&gt;-2 147 483 648&lt;/td&gt;
          &lt;td&gt;4 294 967 295&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;unsigned long&lt;/td&gt;
          &lt;td&gt;4个字节&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;4 294 967 295&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;long long (C99)&lt;/td&gt;
          &lt;td&gt;8个字节&lt;/td&gt;
          &lt;td&gt;-9 223 372 036 854 775 808&lt;/td&gt;
          &lt;td&gt;9 223 372 036 854 775 807&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;unsigned long long&lt;/td&gt;
          &lt;td&gt;8个字节&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;18 446 744 073 709 551 615&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;如果是unsigned 也就是无符号数，数据的每一位都是代表数据。如果是signed有符号数，那么数据的最高位会被当作符号位处理。0代表正数,1代表负数。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;溢出&lt;/strong&gt;（这些比较有辨识度，看到就知道是溢出就好）&lt;/p&gt;
&lt;p&gt;数值有上下限范围，那么就不可避免的会有溢出情况。以32位int为例，有以下四种溢出：&lt;/p&gt;
&lt;p&gt;无符号上溢：0xffffffff + 1变成0&lt;/p&gt;
&lt;p&gt;无符号下溢：0-1变成0xffffffff&lt;/p&gt;
&lt;p&gt;有符号上溢：有符号正数0x7fffffff +1 变成负数0x80000000&lt;/p&gt;
&lt;p&gt;无符号下溢：有符号数0x80000000 -1 变成正数0x7fffffff&lt;/p&gt;
&lt;p&gt;这就是整数溢出。通常来说原因就是两点：&lt;/p&gt;
&lt;p&gt;存储位数不够&lt;/p&gt;
&lt;p&gt;溢出到符号位&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-tip&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;整数溢出一般配合别的漏洞来使用。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;linux基础&#34;&gt;Linux基础
&lt;/h2&gt;&lt;p&gt;这一章内容多是一些文字描述，也会有生活案例加以理解，图片较少，较为枯燥。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/1.png&#34;
	width=&#34;1011&#34;
	height=&#34;599&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/1_hu_f407604601a0a452.png 480w, https://expl0rer.top/p/pwn-1/1_hu_f5a7b4b89149cb17.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Linux大家族&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;405px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;保护层级：分为四个ring0-ring3。一般来说就两个：0为内核，3为用户。&lt;/p&gt;
&lt;p&gt;权限：用户分为多个组&lt;/p&gt;
&lt;p&gt;文件和目录等等的权限一般都是三个，即可读可写可执行，
读：R，写：W，执行：X&lt;/p&gt;
&lt;p&gt;赋予一个可执行文件执行权限就是chmod +x filename&lt;/p&gt;
&lt;h3 id=&#34;操作系统&#34;&gt;操作系统
&lt;/h3&gt;&lt;p&gt;在第一阶段学习中我们接触到了Linux操作系统的相关指令：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;名称&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;示例（以Kali虚拟机为例）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ls&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;列出当前目录文件&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ls&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;cd&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;切换目录&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;cd/home/ctf&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;pwd&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;打印当前目录&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;pwd&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;touch&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;创建空白文件&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;touch flag&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;mkdir&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;创建目录&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;mkdir /home/ctf&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;rmdir&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;删除目录&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;rmdir /home/ctf&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;rm&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;删除文件&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;rm flag&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;cp&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;复制文件&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;cp /home/ctf/flag /home/flag&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;mv&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;移动文件&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;mv flag /home/ctf/flag&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;cat&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;输出文件内容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;cat flag&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;diff&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;比较两个文件信息&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;diff flag1 flag2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;chmod&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;切换执行权限&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;chmod 777 elf1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;locate&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;查找文件&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;locate flag&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数据存储&#34;&gt;数据存储
&lt;/h3&gt;&lt;p&gt;计算机内部有两种数据的存储形式：&lt;strong&gt;大端序、小端序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大端序&lt;/strong&gt;：数据高位存储在计算机地址的低位，数据低位存储在地址的高位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小端序&lt;/strong&gt;：数据高位存储在计算机地址的高位，数据低位存储在地址的低位。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-tip&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;大端序：高低低高&lt;/p&gt;
&lt;p&gt;小端序：高高低低&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;这时我也看不懂，上例子！&lt;/p&gt;
&lt;p&gt;我们以一个数据：0x123456789abcdef；那么0为低地址，7为高地址。&lt;/p&gt;
&lt;p&gt;大端序存储：低位储存到计算机地址高位&amp;hellip;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;th&gt;3&lt;/th&gt;
          &lt;th&gt;4&lt;/th&gt;
          &lt;th&gt;5&lt;/th&gt;
          &lt;th&gt;6&lt;/th&gt;
          &lt;th&gt;7&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;01&lt;/td&gt;
          &lt;td&gt;23&lt;/td&gt;
          &lt;td&gt;45&lt;/td&gt;
          &lt;td&gt;67&lt;/td&gt;
          &lt;td&gt;89&lt;/td&gt;
          &lt;td&gt;ab&lt;/td&gt;
          &lt;td&gt;cd&lt;/td&gt;
          &lt;td&gt;ef&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;将此数据按照字符串输出，得到：\x01\x23\x45\x67\x89\xab\xcd\xef&lt;/p&gt;
&lt;p&gt;小端序存储：低位储存到计算机地址的低位&amp;hellip;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;th&gt;3&lt;/th&gt;
          &lt;th&gt;4&lt;/th&gt;
          &lt;th&gt;5&lt;/th&gt;
          &lt;th&gt;6&lt;/th&gt;
          &lt;th&gt;7&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;ef&lt;/td&gt;
          &lt;td&gt;cd&lt;/td&gt;
          &lt;td&gt;Ab&lt;/td&gt;
          &lt;td&gt;89&lt;/td&gt;
          &lt;td&gt;67&lt;/td&gt;
          &lt;td&gt;45&lt;/td&gt;
          &lt;td&gt;23&lt;/td&gt;
          &lt;td&gt;01&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;将此数据按照字符串输出，得到：\xef\xcd\xab\x89\x67\x45\x23\x01&lt;/p&gt;
&lt;p&gt;从上面这两种方式比较的话，可以知道，大端序符合人类的阅读习惯；但从存储逻辑、数学运算规律来看，小端序更正常。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;Linux数据存储的格式为&lt;strong&gt;小端序&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;Linux是小端序储存，所以我们以字符串的形式输入一个数字时，要注意格式，比如输入0xdeadbeef这个数字。&lt;/p&gt;
&lt;p&gt;字符串输入就是“\xef\xbe\xad\xde”传入给程序。不过好在有&lt;strong&gt;pwntools&lt;/strong&gt;，p32(0xdeadbeef)即可完成自动转换。&lt;/p&gt;
&lt;h3 id=&#34;文件描述符&#34;&gt;文件描述符
&lt;/h3&gt;&lt;p&gt;Linux系统中，把一切都看做是文件，当进程打开现有文件或创建新文件时，内核向进程返回一个文件描述符，文件描述符就是内核为了高效管理已被打开的文件所创建的索引，用来指向被打开的文件，所有执行 I/O 操作的系统调用都会通过文件描述符。&lt;/p&gt;
&lt;p&gt;每个文件描述符会与一个打开的文件相对应，不同的文件描述符也可能指向同一个文件。&lt;/p&gt;
&lt;p&gt;相同的文件可以被不同的进程打开，也可以在同一个进程被多次打开。&lt;/p&gt;
&lt;p&gt;我们会在open、read、write这些常见函数中见到。&lt;/p&gt;
&lt;p&gt;0标准输入（stdin）、1标准输出（stdout）、2标准错误（stderr）read(0,buf,size）从stdin中读size个数据到buf中，write(1,buf,size)从buf中取size个数据到stdout中。&lt;/p&gt;
&lt;h3 id=&#34;栈stack&#34;&gt;栈（stack）
&lt;/h3&gt;&lt;p&gt;学过数据结构都知道，这是一种储存方式：是一种遵循「后进先出（LIFO, Last In First Out）」原则的线性数据结构，类似于日常生活中堆叠的盘子 —— 最后放上去的盘子，会被最先取走。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈的核心特性&lt;/strong&gt;：
操作受限：只能在栈的一端（通常称为「栈顶」）进行数据的插入（称为「入栈」或 push）和删除（称为「出栈」或 pop），另一端（「栈底」）固定不动。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;由于函数调用顺序也是LIFO，所以我们能接触到的绝大多数系统，都是通过栈这一数据结构来维护函数调用关系。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序访问&lt;/strong&gt;：只能从&lt;strong&gt;栈顶&lt;/strong&gt;开始依次访问元素，无法直接访问栈中间或栈底的元素。&lt;/p&gt;
&lt;p&gt;说得我都懵了，这啥？？通俗讲就是栈好比是一个薯片罐，只有一个罐口，把薯片装进去后，最后放的薯片总是被第一个拿出来，倒数第二个被放进去的，在后面被打开时都是第二个先被拿出来，这就是栈的顺序访问特点啦，而栈就是薯片罐这种存储器的名字。&lt;/p&gt;
&lt;p&gt;等会？这放到机器语言如C语言的话，不就是数组吗？为什么那么麻烦要发明这个栈呢？就是方便一些，一把普通菜刀能切水果、剁骨头，为什么要发明水果刀和大砍刀？原因就是方便。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;栈其实就是一个“阉割版”的数组，只能在一头操作。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;linux种的栈&#34;&gt;Linux种的栈
&lt;/h4&gt;&lt;p&gt;在linux系统中，系统为每一个进程都安排了一个栈，进程中每一个调用的函数都有自己独立的栈帧。&lt;/p&gt;
&lt;p&gt;在linux系统中，栈是由高地址向低地址&lt;strong&gt;生长&lt;/strong&gt;（小端序）。&lt;/p&gt;
&lt;h5 id=&#34;换句话说高地址为栈底低地址为栈顶那么为什么这么反直觉反人类的安排呢&#34;&gt;换句话说,高地址为栈底，低地址为栈顶。那么为什么这么反直觉反人类的安排呢？
&lt;/h5&gt;&lt;p&gt;我们接触到的一些算法，很多都是用栈来实现的，比如DFS。DFS会将发现的节点存储在栈中，然后访问的顺序就是LIFO。但是很多这种LIFO的算法都会以&lt;em&gt;&lt;strong&gt;递归&lt;/strong&gt;&lt;/em&gt;的形式实现。其实，递归的形式实现这些算法本质上来说也是利用栈结构，只不过他没有在程序中另外申请一个栈，而是用的函数调用栈。&lt;/p&gt;
&lt;h5 id=&#34;为什么栈从高地址向低地址生长&#34;&gt;为什么栈从高地址向低地址生长？
&lt;/h5&gt;&lt;p&gt;有的说法是这么设计和小端序更配合（比如说访问一个数据的低字节）。&lt;/p&gt;
&lt;p&gt;这里我的认知有限，我也不能解答，过于理论化研究也是很牢的。这只能留到未来的自己去解答了，这里先标记一下以后再单独出一篇Blog文章来讲解。只能先死记一下咯/************。&lt;/p&gt;
&lt;h2 id=&#34;调用约定&#34;&gt;调用约定
&lt;/h2&gt;&lt;p&gt;看标题就是关于函数调用的内容，在上一章汇编指令就有预示了，像call调用函数地址、jmp无条件跳转。&lt;/p&gt;
&lt;p&gt;再来回顾下栈的指令：&lt;/p&gt;
&lt;p&gt;pop出栈/弹栈，Pop指令的作用是弹栈，将栈顶的数据弹出到寄存器，然后栈顶指针向下移动一个单位。具体来说：如pop rax，作用就是mov rax [rsp]；add rsp 8（平衡栈指针：当手动修改栈指针后（如临时分配栈空间），用 add rsp, 8 恢复栈的对齐状态，确保后续操作符合 8 字节对齐要求）；&lt;/p&gt;
&lt;p&gt;push压栈，Push指令的作用就是压栈，将栈顶指针向上移动一个单位的距离，然后将一个寄存器的值存放在栈顶，具体来说：如push rax，其实际效果就是：sub rsp 8; mov [rsp] rax；&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-tip&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;add rsp 8的8怎么来的？在 x86-64 架构（64 位系统）中：
寄存器（如 rsp、rax 等）是 64 位（8 字节）的。内存地址也是 64 位的，最小的可寻址单位是字节，但栈操作通常以&lt;strong&gt;8 字节为单位进行对齐&lt;/strong&gt;（这是系统调用和函数调用的标准要求）。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;函数调用流程&#34;&gt;函数调用流程
&lt;/h3&gt;&lt;p&gt;从一个实例出发,main调用func_b, func_b调用func_a。我们从main函数开始，逐步分析栈帧变化:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//do sth
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;func_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;dunc_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;func_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当运行到call func b时main函数的栈帧。Rbp指向栈底,rsp指向栈底
这段栈帧存放了一些main的局部变量。
main函数要调用func b，main只需要call func b，
也就是push rip；mov rip func b；&lt;/p&gt;
&lt;p&gt;那么此时跳转到func_b继续执行，func _b直接执行主逻辑吗？
显然不是的，被调用函数还需要维护栈帧。&lt;/p&gt;
&lt;p&gt;具体来说，需要以下几步：&lt;/p&gt;
&lt;p&gt;push rbp；将调用函数的栈底指针保存。&lt;/p&gt;
&lt;p&gt;mov rbp rsp；将栈底指针指向现在的栈顶。&lt;/p&gt;
&lt;p&gt;sub rsp xxx；开辟被调用函数的栈帧，此时上一步的rbp就指向栈帧的底。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/2.png&#34;
	width=&#34;420&#34;
	height=&#34;654&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/2_hu_1c5004a635f7b9a.png 480w, https://expl0rer.top/p/pwn-1/2_hu_4c5071a9706d750a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;程序运行时内存中栈帧（stack frame）的组织方式&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;64&#34;
		data-flex-basis=&#34;154px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;图很明了了吧。但我起初一看，为什么int a =2所在地址要高于fun_b函数？不是funb函数要先比int a=2先执行吗？&lt;/p&gt;
&lt;p&gt;自问自答：要理解这个问题，需结合函数调用栈的生长方向和代码执行顺序与栈帧分配的关系来分析，&lt;strong&gt;栈是从高地址向低地址生长的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码执行顺序是：main → func_b → func_a → 返回 func_b → 定义 int c = 1 → 返回 main → 定义 int a = 2。&lt;/p&gt;
&lt;p&gt;因为&lt;strong&gt;每个函数调用通常会占用一个栈帧&lt;/strong&gt;，所以说fun_b函数会被分配在main函数之下（main函数先执行，固然main是位于高地址），而int a = 2 属于 main 栈帧的局部变量，因此地址高于 func_b 的栈帧。&lt;/p&gt;
&lt;p&gt;来我们继续分析这图，func_b执行完维护栈帧操作后的栈布局。
所谓栈帧的维护就是维护rbp和rsp两个指针。
Rsp永远指向当前&lt;strong&gt;栈的顶部&lt;/strong&gt;（Rsp在哪和栈顶在哪关系不大，但Rsp是指向它所在的栈帧的顶部）。
Rbp用来定位局部变量。&lt;/p&gt;
&lt;p&gt;接着，再往下运行程序，调用func_a函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/3.png&#34;
	width=&#34;528&#34;
	height=&#34;810&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/3_hu_9a324d1379c9fdbc.png 480w, https://expl0rer.top/p/pwn-1/3_hu_1191a96fcc708a5e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;156px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;那这里的每一个栈帧就代表我之前所说的薯片啦，一片片被拿出来，一个个运行。&lt;/p&gt;
&lt;p&gt;func_b调用完func_a后的栈布局。至此，示例的函数调用已经完毕。
现在，func_a执行完毕，要返回了。如何维护栈帧呢?&lt;/p&gt;
&lt;p&gt;在这里，我们学习一个新的汇编指令leave：&lt;/p&gt;
&lt;p&gt;&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD
作用是维护栈帧，通常出现在函数的结尾，与ret（return）连用。其实际作用为：mov rsp rbp；pop rbp；即：将栈顶指针指向栈帧的底部、然后在栈中弹出新的栈底指针。&lt;/p&gt;
&lt;p&gt;在一个函数执行结束返回时，会执行leave；ret；&lt;/p&gt;
&lt;p&gt;实际效果就是：mov rsp rbp； poprbp； pop eip；
此时我们观察程序执行完func_a时的栈帧，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/4.png&#34;
	width=&#34;495&#34;
	height=&#34;805&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/4_hu_2cb24e1acdfb25b3.png 480w, https://expl0rer.top/p/pwn-1/4_hu_2c5470e10b698a3a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;61&#34;
		data-flex-basis=&#34;147px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以说，与之前的func_b未调用func_a前的栈帧对比，是一模一样，说明已经恢复了栈帧。唯一不同之处在于此时程序的rip已经指向了c=1后面一条指令，说明func_a已经执行完毕。&lt;/p&gt;
&lt;p&gt;以此类推，func_b执行完毕返回后，栈布局如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/5.png&#34;
	width=&#34;455&#34;
	height=&#34;785&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/5_hu_99c9a90146c07cce.png 480w, https://expl0rer.top/p/pwn-1/5_hu_929fb098a281dce3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;57&#34;
		data-flex-basis=&#34;139px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在这之后，main函数继续执行此时布局变回开始执行程序时的栈布局，直到结束。至此，函数的调用返回执行流程结束。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;调用函数：只需要将rip压栈（保存到当前栈帧），即push rip，然后讲rip赋值为被调用函数的起始地址，这一操作被&lt;em&gt;隐性的内置在call指令中&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;被调用函数：push rbp；mov rbp rsp； sub rsp 0xxxx。即保存调用函数的rbp指针，将自己的rbp指针指向栈顶，然后开辟栈空间给自己用，此时rbp就变成了被调用函数的栈底。&lt;/p&gt;
&lt;p&gt;函数返回：leave；ret；翻译过来就是：mov rsp rbp；pop rbp；pop rip；即恢复栈帧,返回调用函数的返回地址。&lt;/p&gt;
&lt;p&gt;这里有个疑问，为什么在调用过程种，寄存器rsp这类会出现很多的赋值操作，比如上述的“mov rsp rbp；pop rbp；pop rip”，rsp更像是一个中间变量，一直变化。其实这是有原因的。&lt;/p&gt;
&lt;p&gt;rsp 看似动态变化，但它的变化是完全遵循栈操作的逻辑和函数调用约定的。栈是一种后进先出的数据结构，在函数调用过程中，参数入栈、局部变量分配内存（通过调整 rsp 来实现）、保存寄存器值等操作，都需要通过修改 rsp 的值来改变栈顶位置，以完成对栈内存的合理使用和管理 。而在函数返回阶段，又要通过调整 rsp 来恢复之前的栈状态，释放当前函数占用的栈空间。&lt;/p&gt;
&lt;p&gt;而rbp 明确划分了当前函数栈帧的范围：从 rbp（底部）到 rsp（顶部）之间的内存区域，它更像是一个固定的描点，数值不变依靠rsp变化来完成操作。&lt;/p&gt;
&lt;p&gt;所以，这些寄存器的赋值操作都是为了严格按照计算机体系结构和编程语言的函数调用规范，实现函数调用、执行和返回过程中的内存管理、数据保护以及程序执行流的正确控制。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;简单说，&lt;code&gt;rsp&lt;/code&gt; 是 “动态变化的栈顶指针”，而 &lt;code&gt;rbp&lt;/code&gt; 是 “固定不动的栈帧基准”—— 前者负责管理栈的实时状态，后者负责锚定当前栈帧的位置和范围、栈帧的局部变量，二者配合实现了函数调用过程中内存的有序管理。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;调用约定-1&#34;&gt;调用约定
&lt;/h3&gt;&lt;p&gt;返回值：一般来说,一个函数的返回值会存储到RAX寄存器。
X86-64函数的调用约定为：&lt;/p&gt;
&lt;p&gt;从左至右参数一次传递给rdi、rsi、rdx、rcx、r8、r9。&lt;/p&gt;
&lt;p&gt;如果一个函数的参数多于6个，就不在寄存器传参了，而是从右至左压入栈中传递。&lt;/p&gt;
&lt;p&gt;作用是维护栈帧，通常出现在函数的结尾，与ret（return）连用。其实际作用为：mov rsp rbp；pop rbp；即：将栈顶指针指向栈帧的底部、然后在栈中弹出新的栈底指针。&lt;/p&gt;
&lt;h4 id=&#34;系统调用&#34;&gt;系统调用
&lt;/h4&gt;&lt;p&gt;syscall指令，用于调用系统函数，调用时需要指明&lt;strong&gt;系统调用号码&lt;/strong&gt;。系统调用号存在 rax 寄存器中，然后布置好参数，执行syscall即可。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;调用号码&lt;/th&gt;
          &lt;th&gt;名称&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;read&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;write&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;open&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;close&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;mmap&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;37&lt;/td&gt;
          &lt;td&gt;alarm&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;60&lt;/td&gt;
          &lt;td&gt;exit&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;62&lt;/td&gt;
          &lt;td&gt;kill&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;59&lt;/td&gt;
          &lt;td&gt;execv&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;还有一些调用号码没列出来，其实上网查一查就行，这东西用多了就记住了，前期不用刻意死记硬背的。&lt;/p&gt;
&lt;p&gt;看到这里，是不是有点熟悉，看过《第一阶段》的操作系统章节就知道，有chmod 777 &amp;lt;文件&amp;gt;：设定文件使用权限的指令。正好就是1+2+4，4代表是x执行权限，这里表格没写出来。所以入门pwn我就建议大家去学那个Linux操作系统，基础过一下，不用精通，不然你强行入门PWN很懵的。&lt;/p&gt;
&lt;p&gt;示例：调用read(0,buf,size)：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;从左至右参数一次传递给rdi、rsi、rdx、rcx、r8、r9&lt;/strong&gt;&lt;/em&gt;（寄存器）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;     read&amp;#39;s syscall number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rdi&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;     first arg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rsi&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   second arg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rdx&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ze&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;  third ard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;       execute read(0,buf,size);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;elf文件&#34;&gt;ELF文件
&lt;/h2&gt;&lt;h3 id=&#34;elf&#34;&gt;elf
&lt;/h3&gt;&lt;p&gt;linux环境中，&lt;strong&gt;二进制可持性文件&lt;/strong&gt;的类型是ELF（Executable and Linkable Format）文件。&lt;/p&gt;
&lt;p&gt;elf文件的格式比较简单，我们需要了解的就是elf文件中的各个节、段等概念。elf的基本信息存在于elf的头部信息中，这些信息包括指令的运行架构、程序入口等内容，可以通过readelf -h &amp;lt;elf_name&amp;gt;来查看头部信息，当然打过CTF-MISC的知道的话估计会去用010editor，都可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/6.png&#34;
	width=&#34;610&#34;
	height=&#34;180&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/6_hu_4aa131809ccbce34.png 480w, https://expl0rer.top/p/pwn-1/6_hu_66c842a6c402488c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;338&#34;
		data-flex-basis=&#34;813px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/7.png&#34;
	width=&#34;1221&#34;
	height=&#34;659&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/7_hu_f82dfb9f0e6af09c.png 480w, https://expl0rer.top/p/pwn-1/7_hu_c803067fc21ccd19.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Magic头部文件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/8.png&#34;
	width=&#34;858&#34;
	height=&#34;305&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/8_hu_ebcc70c8d17b8d76.png 480w, https://expl0rer.top/p/pwn-1/8_hu_d91de4a5ee068c7b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;第二第三张图就是ELF文件了，这种文件并不是常规的ZIP这些噢。&lt;/p&gt;
&lt;p&gt;elf文件中包含许多个节（section），各个节中存放不同的数据，这些节的信息存放在节头表中，readelf -S &amp;lt;file&amp;gt;查看，这些节主要包括：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;名称&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;.text&lt;/td&gt;
          &lt;td&gt;存放程序运行的代码&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;.rdata&lt;/td&gt;
          &lt;td&gt;存放一些如字符串等不可修改的数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;.data&lt;/td&gt;
          &lt;td&gt;存放&lt;em&gt;已经初始化&lt;/em&gt;的可修改的数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;.bss&lt;/td&gt;
          &lt;td&gt;存放&lt;em&gt;未被初始化&lt;/em&gt;的程序可修改的数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;.plt 与 .got&lt;/td&gt;
          &lt;td&gt;程序动态链接函数地址&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;elf文件不是我们所说的常规文件，不在我们的电脑桌面上，而是存在磁盘文件里，它本质上是存储在磁盘（硬盘、SSD 等）上的 “常规文件”，运行程序时，这个程序的elf文件才会加载到内存里，这就是我们所说的&lt;strong&gt;运行内存&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;elf文件在加载进入内存时：
elf文件的节（section）会被映射进内存中的段（segment），而这一映射过程遵循的机制是根据各个节的权限来进行映射的。&lt;/p&gt;
&lt;p&gt;换句话说，可读可写的节被映射入一个段，只读的节被映射入一个段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/9.png&#34;
	width=&#34;1100&#34;
	height=&#34;560&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/9_hu_6bae07d610db5804.png 480w, https://expl0rer.top/p/pwn-1/9_hu_66c8193d78b0595a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;471px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;单个elf文件内部多个节被合并映射入一个段，此时就标志着elf文件被启动运行了。&lt;/p&gt;
&lt;p&gt;根据上述讲解，可以知道ELF文件以两种状态存在：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;状态&lt;/th&gt;
          &lt;th&gt;存储位置&lt;/th&gt;
          &lt;th&gt;用途&lt;/th&gt;
          &lt;th&gt;能否被CPU直接执行&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;未运行时&lt;/td&gt;
          &lt;td&gt;磁盘&lt;/td&gt;
          &lt;td&gt;保存程序的指令和数据（静态文件）&lt;/td&gt;
          &lt;td&gt;不能（CPU只认识内存数据）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;运行时&lt;/td&gt;
          &lt;td&gt;运行内存&lt;/td&gt;
          &lt;td&gt;CPU从内存读取指令并执行&lt;/td&gt;
          &lt;td&gt;能&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;In other words，ELF 文件是 “程序的静态载体”（存磁盘），确保程序能从源代码正确转换为可执行文件，并在内存中被正确加载和运行。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;libc&#34;&gt;libc
&lt;/h3&gt;&lt;p&gt;什么是libc?&lt;/p&gt;
&lt;p&gt;glibc是linux下面C标准库的实现，全称GNU C Library。&lt;/p&gt;
&lt;p&gt;glibc本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准C库，而Linux下原来的标准C库Linux libc逐渐不再被维护。&lt;/p&gt;
&lt;p&gt;Linux下面的标准C库不仅有这一个，如uclibc、klibc，以及上面被提到的Linux libc，但是glibc无疑是用得最多的。glibc在/lib目录下的.so文件为&lt;strong&gt;libc.so.6&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;等等&amp;hellip;&amp;hellip;so后缀？？.so时啥文件，本质上也是个elf文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/10.png&#34;
	width=&#34;1219&#34;
	height=&#34;70&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/10_hu_4c2c3ddbfb8ccae1.png 480w, https://expl0rer.top/p/pwn-1/10_hu_98caa8be48b8098e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在Ubuntu上的so文件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1741&#34;
		data-flex-basis=&#34;4179px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通常.so用./的指令运行后会给出版本信息，当然，用file命令也是可以的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/11.png&#34;
	width=&#34;1676&#34;
	height=&#34;190&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/11_hu_adb8a45b71a6e24d.png 480w, https://expl0rer.top/p/pwn-1/11_hu_c64d7e55efbc73c3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;libc.so文件版本信息&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;882&#34;
		data-flex-basis=&#34;2117px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;Linux基本上所有的程序都依赖libc，所以libc中的函数至关重要。当然CTFpwn也离不开libc：IDA分析libc、源码。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;延迟绑定机制&#34;&gt;延迟绑定机制
&lt;/h2&gt;&lt;p&gt;在上章的elf文件，看到了.got和.plt文件，用于动态链接函数地址。&lt;/p&gt;
&lt;h3 id=&#34;动态链接库&#34;&gt;动态链接库
&lt;/h3&gt;&lt;p&gt;我们程序开发过程中都会用到系统函数，比如read，write， open等等。这些系统函数不需要我们实现,因为系统已经帮你完成这些工作，只需要调用即可，存放这些函数的库文件就是动态链接库。通常情况下，我们对于PWN接触到的动态链接库就是&lt;strong&gt;libc.so&lt;/strong&gt;文件。&lt;/p&gt;
&lt;h3 id=&#34;静态编译和动态编译&#34;&gt;静态编译和动态编译
&lt;/h3&gt;&lt;p&gt;这里我们举一个例子来类比&lt;em&gt;静态编译与动态编译&lt;/em&gt;的概念：&lt;/p&gt;
&lt;p&gt;小明要开一个餐馆（program），餐馆的菜单上有几百种菜肴（函数），小明的餐馆每天都会来很多顾客，每个顾客点的菜都可能不一样。我们知道，每道菜所需要的食材（系统函数）都不一样，这些食材都存放于仓库（动态链接库）中。&lt;/p&gt;
&lt;p&gt;那么现在问题来了，小明如何保证每个顾客点的菜都能被满足呢？&lt;/p&gt;
&lt;p&gt;第一种方式：小明把仓库中所有的食材都搬进厨房（静态编译）这时，小明不需要挪地方（静态），只需要在厨房中就可以工作，但是
这会带来冗余，可能厨房中的食材很多都用不上。高效&lt;/p&gt;
&lt;p&gt;第二种方式：小明每次遇到新的所需要的食材，才去仓库取（动态编译）。这时，小明可能挪动的比较频繁（动态），但是可以保证厨房面没那么多可能用不到的东西。全面&lt;/p&gt;
&lt;p&gt;一个程序运行过程中可能会调用许许多多的库函数，这些库函数在一次运行过程中不能保证全部被调用。&lt;/p&gt;
&lt;p&gt;静态编译的思路就是将所有可能运行到的库函数一同编译到可执行文件中。这一方式的优点就在于在程序运行中不需要依赖动态链接库。适用的场合就是比如你本地编译的程序需要的动态链接库版本比较特殊，如果在别的机器上运行可能对方动态链接库版本和你不一样会出bug，这时候用静态编译。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;缺点就是变异过后程序体积很大，编译速度也很慢。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于动态编译，优点是缩小了执行文件本身的体积，另一方面是加快了编译速度，节省本地的系统资源。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;缺点是使用链接库的命令，需要附带相对庞大的链接库，如果其他计算机没有安装对于的运行库，则动态编译的可执行文件就不能运行。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;欸欸看回小明，他要选第二种方式（动态编译），但每次去仓库找食材太麻烦了，而且仓库这么大，，于是他用小本本记下了在仓库的每样食材的位置（got表），下一次找这件食材就高效多了。这就是got。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;h4 id=&#34;延迟绑定&#34;&gt;延迟绑定
&lt;/h4&gt;&lt;p&gt;这就是linux的延迟绑定机制，而存放这个地址的小本子就是got表。got表全程是Global Offset Table，也就是&lt;strong&gt;全局偏移量表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在程序运行时，got表初始并不保存库函数的地址，只有在第一次调用过后，程序才将这一地址保存在got表中。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;plt与got&#34;&gt;PLT与GOT
&lt;/h3&gt;&lt;p&gt;GOT（Global Offset Table，全局偏移表）：数据段用于地址无关代码的 Linux ELF 文件中确定全局变量和外部函数地址的表。&lt;/p&gt;
&lt;p&gt;PLT（Procedure Linkage Table，程序链接表）： Linux ELF 文件中用于&lt;strong&gt;延迟绑定&lt;/strong&gt;的表。&lt;/p&gt;
&lt;p&gt;ELF 中有.got和.plt.got 两个 GOT 表，got 表用于全局变量的引用地址，.got.plt 用于保存函数引用的地址。&lt;/p&gt;
&lt;p&gt;不论是第几次调用外部函数，程序真正调用的其实是plt表。plt表其实是一段段汇编指令构成。&lt;/p&gt;
&lt;h4 id=&#34;plt-工作流程&#34;&gt;PLT 工作流程
&lt;/h4&gt;&lt;p&gt;在第一次调用外部函数时，plt表首先会跳到对应的got表项中。由于并没有被调用过，此时的got表存储的不是目标函数地址，此时的got表中存储的地址是pt表中的一段指令，其作用就是准备一些参数，进行动态解析。跳转回plt表后，plt表又会跳转回plt的表头，表头内容就是调用动态解析函数，将目标函数地址存放入got表中。&lt;/p&gt;
&lt;p&gt;第一次调用外部函数，以调用C语言的printf为例子去详细讲解：&lt;/p&gt;
&lt;p&gt;1、调用时，汇编语言执行到call printf时，先跳向PLT表中printf对应的条目（plt[printf]），这么说好像起到jmp跳转地址的作用啊。只是类似，并未跳转地址，而此时编译还不知道，而是先跳转PLT表中位该函数预留的一个”小跳板“（plt[printf]）。&lt;/p&gt;
&lt;p&gt;**2、plt[printf]**第一次被调用时，此时GOT表中还没被填充真实地址（因为此前没有被解析过），所以里头并不是printf的真实地址，而是plt[printf]中下一条指令的地址（也就是jmp*GOT[printf]）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call printf&lt;/code&gt; → 跳向&lt;code&gt;plt[printf]&lt;/code&gt; → 执行&lt;code&gt;jmp *GOT[printf]&lt;/code&gt; → 此时&lt;code&gt;GOT[printf]&lt;/code&gt;里已是真实地址，直接跳过去执行。此时就知道printf的真实地址了。&lt;/p&gt;
&lt;p&gt;3、**跳回PLT后，执行”准备解析参数“的指令。**plt[printf]的下一条指令是准备动态解析需要的参数：比如把printf对应的符号索引（用于告诉动态链接器 “要解析哪个函数”）压入栈中。这些参数是提前在编译时就写好的，目的是告诉动态链接器 “我要找的是printf，帮我查它的真实地址”。这些参数是提前在编译时就写好的，目的是告诉动态链接器 “我要找的是printf，帮我查它的真实地址”。&lt;/p&gt;
&lt;p&gt;4、**跳向PLT表头（plt[0]），触发动态链接器的解析函数。**准备好参数后，plt[printf]会跳向 PLT 表的 “表头”（plt[0]）。plt[0]里的指令是固定的：先把GOT[0]的地址压栈（GOT[0]存储着动态链接器需要的辅助信息），然后调用动态链接器的核心解析函数（_dl_runtime_resolve）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;？？？这有个疑问，怎么会有函数来帮助外部函数如printf去确定地址呢？其实这个&lt;code&gt;_dl_runtime_resolve&lt;/code&gt;函数比较特殊，它是动态链接器的组成部分，是已经预先存在于动态链接器的代码之中的，动态链接器一加载，它的地址就被先解析出来了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;5、&lt;strong&gt;动态链接器解析出真实地址，写入 GOT 表，完成绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是用汇编语言代码来概括这五步流程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;GOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; 第1行：跳向GOT[printf]存储的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;   &lt;span class=&#34;mh&#34;&gt;0x123&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; 第2行：压入printf的符号索引（假设是0x123）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; 第3行：跳向PLT表头&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这五步也就系统概括了小明在厨房做菜麻烦需要用小本本记下仓库的所需食材的存放地方（地址）的过程。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;总结：PLT 和 GOT 的协作核心&lt;/p&gt;
&lt;p&gt;PLT 是 “跳板”：负责第一次调用时触发解析流程，后续调用时直接转发到 GOT 中的真实地址。&lt;/p&gt;
&lt;p&gt;GOT 是 “缓存表”：第一次调用时存储 PLT 内的跳转地址（用于触发解析），解析后存储函数真实地址（供后续直接调用）。
整个机制的目的是 &lt;strong&gt;“延迟解析”&lt;/strong&gt;：避免程序启动时解析所有外部函数（耗时），只在第一次调用时解析，平衡启动速度和运行效率。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote class=&#34;alert alert-warn&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;理解了这个流程，就掌握了动态链接中最核心的 “懒绑定” 机制，这也是 CTFpwn 中 “&lt;strong&gt;PLT 劫持&lt;/strong&gt;” 等漏洞利用的基础。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;linux安全防护机制&#34;&gt;Linux安全防护机制
&lt;/h2&gt;&lt;p&gt;栈溢出、指针悬挂、内存地址泄露等Bug会导致程序崩溃，一些攻击者会刻意制造这些漏洞来扰乱程序正常执行，这就是早期PWN的威力。&lt;/p&gt;
&lt;h3 id=&#34;保护机制&#34;&gt;保护机制
&lt;/h3&gt;&lt;blockquote class=&#34;alert alert-error&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;CANARY、NX、ASRL、PIE、RELRO&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;栈的作用为存储函数调用相关信息以及函数的局部变量。&lt;/p&gt;
&lt;p&gt;这些局部变量通常为数组或者输入的缓冲区（buf）。而函数调用相关的信息，主要是返回地址和栈底指针（rbp）。&lt;/p&gt;
&lt;h3 id=&#34;canary&#34;&gt;CANARY
&lt;/h3&gt;&lt;p&gt;Canary中文翻译就是金丝雀，来源是之前科技不发达时，矿工会在下井作业时带一个金丝雀，用来判断地下环境有没有煤气之类的毒气泄漏，金丝雀没事，大家继续干活；金丝雀如果死了，大家赶紧跑。&lt;/p&gt;
&lt;p&gt;在Linux中，Canary的作用就如同他引用的一样，用来判断程序的执行环境，主要是针对检测&lt;strong&gt;栈溢出&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;canary是一个开头字节为\x00的一段长度为八个字节(x64)的随机数，这个随机数本体存放于 fs 段偏移为 0x28 的区域。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在每次函数调用中，程序都会将这段随机数存放于栈底，每次运行结束返回时，都会将这一随机数与他的本体进行比对。如果这个值被改变，则意味着发生了栈溢出，程序直接退出，没有改变的话，程序继续执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://expl0rer.top/p/pwn-1/12.png&#34;
	width=&#34;819&#34;
	height=&#34;431&#34;
	srcset=&#34;https://expl0rer.top/p/pwn-1/12_hu_e74b0eb1f3623cc7.png 480w, https://expl0rer.top/p/pwn-1/12_hu_d9ea985ab2966894.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Canary示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;190&#34;
		data-flex-basis=&#34;456px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-warn&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;由于canary开头字节为x00，所以通常情况下不能被打印出来。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;通常情况下，程序如果开启了canary保护，大概率说明这道题目不是栈溢出题目了。当然也要具体情况具体分析。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote class=&#34;alert alert-error&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;绕过方法主要就是修改canary或者泄漏canary&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;泄漏 canary：利用格式化字符串、栈溢出 + 输出功能等漏洞，读取栈上的 canary 值（注意首字节 \x00 的影响）。&lt;/p&gt;
&lt;p&gt;修改 canary：用泄漏的 canary 值，在栈溢出时覆盖栈上的 canary，使其与原始值（fs:0x28 处）一致，绕过检查。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;nx&#34;&gt;NX
&lt;/h3&gt;&lt;p&gt;NX意思就是Not Executable，开启这个保护后，程序中的堆、栈、bss段等等可写的段就&lt;em&gt;不可以执行&lt;/em&gt;。这就意味着如果开启了NX保护，通常情况下我们就不能执行我们自己编写的shellcode。&lt;/p&gt;
&lt;p&gt;绕过的方式通常是用mprotect函数来改写段的权限，nx保护对于rop或者劫持got表利用方式不影响。&lt;/p&gt;
&lt;h3 id=&#34;pie和aslr&#34;&gt;PIE和ASLR
&lt;/h3&gt;&lt;p&gt;在我们编写ROP或者shellcode时，有一个问题是绕不开的，那就是找到函数地址：&lt;/p&gt;
&lt;p&gt;PIE指的就是程序内存加载基地址随机化，意味着我们不能一下子确定程序的基地址。&lt;/p&gt;
&lt;p&gt;ASLR与PIE大同小异，ASLR是程序运行动态链接库、栈等地址随机化。&lt;/p&gt;
&lt;p&gt;通常来说，CTF中的PWN题与这两个保护打交道的次数最多。&lt;/p&gt;
&lt;blockquote class=&#34;alert alert-note&#34;&gt;
    &lt;blockquote&gt;
&lt;p&gt;绕过方式就是泄露函数地址，然后通过函数的偏移来确定基地址。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PIE&lt;/strong&gt;：是针对&lt;strong&gt;可执行文件本身&lt;/strong&gt;的编译选项。开启后，可执行文件（ELF）会被加载到内存中的随机地址，其内部的代码段、数据段等位置不再是固定值（编译时不指定绝对地址，而是用相对偏移）。
作用：让攻击者无法预先知道程序代码、全局变量等在内存中的绝对地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ASLR&lt;/strong&gt;：是&lt;strong&gt;操作系统级别的保护机制&lt;/strong&gt;。开启后，操作系统会随机化进程的内存布局，包括共享库（.so）的加载地址、栈、堆、内核映射区域等的起始地址。
作用：让攻击者无法预测共享库函数（如 libc 中的 system）、栈 / 堆数据的内存地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关联&lt;/strong&gt;：两者通常配合使用 ——PIE 让可执行文件本身地址随机化，ASLR 让系统其他内存区域随机化，共同增加内存地址预测难度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别核心&lt;/strong&gt;：PIE 是编译时决定的程序属性，ASLR 是系统运行时的布局策略。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通俗点理解：&lt;/p&gt;
&lt;p&gt;ASLR 是操作系统搞的 “整体大洗牌”：每次程序运行时，系统会把整个内存空间的布局（比如共享库放哪、栈和堆从哪开始）随机换个位置，让攻击者猜不到常用函数（比如 system）或数据的具体地址。
ASLR 像每次开演唱会时，场馆里的座位区（共享库）、后台（堆）、观众入口（栈）的位置都随机换。&lt;/p&gt;
&lt;p&gt;PIE 是针对单个程序的 “自身随机化”：如果程序编译时开了 PIE，它自己加载到内存时，代码和数据会随机放在一个不确定的位置（而不是固定地址），让攻击者连程序自己的函数、变量在哪都猜不准。
PIE 像演出团队（程序本身）每次上场时，自己的站位（代码和数据）也随机变。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;relro&#34;&gt;RELRO
&lt;/h3&gt;&lt;p&gt;RELRO（Relocation Read-Only，重定位只读）是一种针对 ELF 文件重定位表的保护机制，核心作用是&lt;strong&gt;限制对 GOT（全局偏移表）等重定位相关区域的修改权限&lt;/strong&gt;，防止攻击者通过篡改 GOT 表实现函数劫持（如修改&lt;code&gt;printf&lt;/code&gt;的 GOT 条目为&lt;code&gt;system&lt;/code&gt;地址）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个保护主要针对的是延迟绑定机制，意思就是说got表这种和函数动态链接相关的内存地址，对于用户是只读的。&lt;/p&gt;
&lt;p&gt;开启了这个保护，意味着我们不能&lt;em&gt;&lt;strong&gt;劫持&lt;/strong&gt;&lt;/em&gt;got表中的函数指针。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;RELRO 的两种模式及作用:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partial RELRO（部分 RELRO）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅将 GOT 表的前半部分（.got.plt）设置为只读，后半部分仍可写。
作用：基本防止对已解析的函数地址（GOT 表中已填充的条目）进行修改，但仍有一定安全隐患。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full RELRO（完全 RELRO）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将整个 GOT 表（包括.dynamic 等重定位相关段）设置为只读，并在程序启动时提前解析所有动态链接符号（关闭延迟绑定）。
作用：彻底阻止对 GOT 表的修改，同时消除延迟绑定可能带来的漏洞（如 PLT 表劫持），但会&lt;em&gt;略微增加程序启动时间&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;以上就是六大章节，因为感觉学着每一章关系好像不是很大，前面elf后面又接个Linux保护机制，感觉很脱节，也可能是我的笔录存在不足，如果你们看到这里又问题的话，欢迎在评论区交流，Blogger会看到的！！！&lt;/p&gt;
&lt;p&gt;在这里总结下：&lt;/p&gt;
&lt;h3 id=&#34;汇编语言&#34;&gt;汇编语言
&lt;/h3&gt;&lt;p&gt;讲了些量词：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;名称&lt;/th&gt;
          &lt;th&gt;翻译&lt;/th&gt;
          &lt;th&gt;大小&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;bit&lt;/td&gt;
          &lt;td&gt;比特&lt;/td&gt;
          &lt;td&gt;1位（1b）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;byte&lt;/td&gt;
          &lt;td&gt;字节&lt;/td&gt;
          &lt;td&gt;8位（1B）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;word&lt;/td&gt;
          &lt;td&gt;字&lt;/td&gt;
          &lt;td&gt;16位&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dword&lt;/td&gt;
          &lt;td&gt;双字&lt;/td&gt;
          &lt;td&gt;32位&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;qword&lt;/td&gt;
          &lt;td&gt;四字&lt;/td&gt;
          &lt;td&gt;64位&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;汇编语言就是机器码的一个助记符，为了让人能看懂&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后有一些常见寄存器种类需要去了解的，篇幅太长，可以回到上面去看：RBP栈底指针、RAX-R15通用寄存器、RSP栈顶指针、EFLAGS标志寄存器、RIP指令计数器&amp;hellip;&amp;hellip;；各种各样的&lt;strong&gt;寻址方式&lt;/strong&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;更重要的是认识了一门语言：汇编语言；初步了解一些汇编指令，如操作码、指令类型、&lt;em&gt;实例和C语言运行得到效果比较&lt;/em&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux基础-1&#34;&gt;Linux基础
&lt;/h3&gt;&lt;p&gt;初步了解Linux的基本内容，保护层级ring、文件描述符、及Linux计算机内部的&lt;strong&gt;大端小端序&lt;/strong&gt;存储形式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大端序：数据高位存储在计算机地址的低位，数据低位存储在地址的高位。&lt;/p&gt;
&lt;p&gt;小端序：数据高位存储在计算机地址的高位，数据低位存储在地址的低位。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;初步认识栈的定义、作用、在PWN所发挥的威力。&lt;/p&gt;
&lt;h3 id=&#34;调用约定-2&#34;&gt;调用约定
&lt;/h3&gt;&lt;p&gt;这里重要的是函数调用流程，重点讲解push、pop、call、ret、jmp等汇编指令的使用效果。&lt;/p&gt;
&lt;p&gt;学习调用约定：返回值：一般来说，一个函数的返回值会存储到RAX寄存器。&lt;/p&gt;
&lt;p&gt;X86-64函数的调用约定为：从左至右参数一次传递给rdi，rsi，rdx，rcx，r8，r9。如果一个函数的参数多于6个，则从右至左压入栈中传递。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统调用&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;调用号码&lt;/th&gt;
          &lt;th&gt;名称&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;read&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;write&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;open&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;close&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;mmap&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;37&lt;/td&gt;
          &lt;td&gt;alarm&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;60&lt;/td&gt;
          &lt;td&gt;exit&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;62&lt;/td&gt;
          &lt;td&gt;kill&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;59&lt;/td&gt;
          &lt;td&gt;execv&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;elf文件-1&#34;&gt;ELF文件
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;elf&lt;/strong&gt;是 Linux 环境下二进制可执行文件的标准格式，存储在磁盘上，运行时加载到内存包含多个节（如.text 代码节、.data 数据节、.plt/.got 动态链接相关节等），节在加载时按权限合并映射到内存中的段有两种状态：未运行时作为静态载体存于磁盘，运行时加载到内存供CPU 执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;libc&lt;/strong&gt;是 Linux 下的 C 标准库（最常用的是 glibc），以.so 文件（本质也是 ELF）形式存在（如 /lib/libc.so.6）
包含大量基础函数，是绝大多数程序的依赖，在 CTF Pwn 中具有重要地位。&lt;/p&gt;
&lt;p&gt;两者关系：程序（ELF）运行时会动态链接 libc 中的函数，通过PLT/GOT 等机制实现调用。&lt;/p&gt;
&lt;h3 id=&#34;延迟绑定机制-1&#34;&gt;延迟绑定机制
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;动态链接库与编译方式&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;动态链接库（如 libc.so）存系统函数（read、printf 等），程序无需自己实现，动态调用即可；&lt;/p&gt;
&lt;p&gt;静态编译：把所有可能用到的库函数打包进可执行文件，不依赖外部库但体积大；&lt;/p&gt;
&lt;p&gt;动态编译：仅在调用时从库中取函数，体积小但依赖外部库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PLT 与 GOT 的作用和延迟绑定&lt;/strong&gt;：
为解决动态编译中 “找函数地址” 的效率问题，用 GOT（全局偏移表，像 “小本本”）存函数地址，PLT（程序链接表，像 “跳板”）负责调用逻辑；
延迟绑定：程序启动时不解析所有函数地址，第一次调用时才通过 PLT 触发动态链接器（用_dl_runtime_resolve 函数）解析真实地址，并存入 GOT，后续调用直接读 GOT 即可。&lt;/p&gt;
&lt;p&gt;第一次调用外部函数的流程：
调用函数→跳 PLT 对应条目→GOT 未存真实地址，跳回 PLT 准备参数→跳 PLT 表头触发解析→动态链接器解析地址写入 GOT→后续调用直接用 GOT 地址。&lt;/p&gt;
&lt;h3 id=&#34;linux安全防护机制-1&#34;&gt;Linux安全防护机制
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;保护机制&lt;/th&gt;
          &lt;th&gt;核心作用&lt;/th&gt;
          &lt;th&gt;关键特点&lt;/th&gt;
          &lt;th&gt;绕过方式&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;CANARY&lt;/td&gt;
          &lt;td&gt;检测栈溢出&lt;/td&gt;
          &lt;td&gt;栈底存 8 字节（x64）随机数（首字节 \x00），返回前比对&lt;/td&gt;
          &lt;td&gt;先泄漏栈上 canary，再用泄漏值覆盖栈上 canary&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NX&lt;/td&gt;
          &lt;td&gt;防 shellcode 执行&lt;/td&gt;
          &lt;td&gt;栈、堆等可写区域标记为 “不可执行”&lt;/td&gt;
          &lt;td&gt;用 mprotect 改权限，或用 ROP、GOT 劫持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PIE&lt;/td&gt;
          &lt;td&gt;程序自身加载地址随机&lt;/td&gt;
          &lt;td&gt;编译选项决定，每次运行加载地址不同&lt;/td&gt;
          &lt;td&gt;泄漏程序内函数地址，算基地址&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ASLR&lt;/td&gt;
          &lt;td&gt;系统内存布局随机&lt;/td&gt;
          &lt;td&gt;系统机制，随机库、栈、堆地址&lt;/td&gt;
          &lt;td&gt;泄漏库函数地址，算目标函数地址&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RELRO&lt;/td&gt;
          &lt;td&gt;防 GOT/PLT 劫持&lt;/td&gt;
          &lt;td&gt;分 Partial（.got.plt 只读）、Full（全 GOT 只读）&lt;/td&gt;
          &lt;td&gt;Partial 可攻未保护 GOT 段；Full 弃 GOT 攻其他&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;结尾&#34;&gt;结尾
&lt;/h2&gt;&lt;p&gt;基本的PWN理论知识就到这里了，现在你看别人PWN神的writeup应该不会这么“牢”了吧，基本能看懂别人说的专用词了。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MISC</title>
        <link>https://expl0rer.top/p/misc/</link>
        <pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://expl0rer.top/p/misc/</guid>
        <description>&lt;p&gt;不要急我还没搞完&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
